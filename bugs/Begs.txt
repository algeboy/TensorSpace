Contains a list of things we want to add to Multilinear.
To quickly get to a specific item, ctrl+f 'BEG<k>' where <k> is the ID of the item.


==========================================================================================
 BEG1: Tensor of quotient of poly ring
==========================================================================================

Tensors should take the following input.

R<x> := PolynomialRing(GF(5));
I := ideal< R | x^2 >;
A := R/I;
T := Tensor(A);

==========================================================================================
 BEG2: Iterate over tensor space
==========================================================================================

TS := KTensorSpace(GF(3),[2,2,2]);
{* Dimension(DerivationClosure(TS,DerivationAlgebra(t)): t in TS *};

fails because there is no iterator "t in TS"
there is way to make this work, e.g.

TS := KTensorSpace(GF(3),[2,2,2]);
MS := KMatrixSpace(GF(3), &*dims );
l := [ TS!Eltseq(m) : m in MS ];

of course if you can iterate over MS you might as well be able to 
iterate over TS

==========================================================================================
 BEG3: Expand categorical operations
==========================================================================================

Currently subtensor and related intrinsics only allow for tensors in the homotopism cat.

==========================================================================================
 BEG4: Mixed types in subtensor space
==========================================================================================

Include mixed data types in the SubtensorSpace construction (i.e. a subtensor 
space and a tensor similar to groups).

==========================================================================================
 BEG5: Tensor of homogeneous poly
==========================================================================================

Tensor(f), where f is a homogeneous polynomial. The machinery is already there 
in polarization.

==========================================================================================
 BEG6: Tensor over nucleus
==========================================================================================

Tensor over nucleus.

==========================================================================================
 BEG7: Incorportate fuse
==========================================================================================

Invariants of k-tensors to incorporate fuse (k>2).

==========================================================================================
 BEG8: Singularity
==========================================================================================

Singularities of a tensor.

==========================================================================================
 BEG9: Semifields
==========================================================================================

Include semifields.

==========================================================================================
 BEG10: Magic square
==========================================================================================

Include magic square functionality.

==========================================================================================
 BEG11: KTensorSpace to allow 0
==========================================================================================

> TS := KTensorSpace(GF(3),[5,5,0]);

KTensorSpace(
    K: GF(3),
    S: [ 5, 5, 0 ]
)
In file "/Users/James/Dropbox/MagmaPackages/Multilinear/TensorSpace/TensorSpc.m\
", line 130, column 22:
>>   return KTensorSpace( K, S, HomotopismCategory(#S-1) );
                        ^
Runtime error in 'KTensorSpace': Integers in argument 2 must be positive.

> KMatrixSpace(GF(3),1,0);
Full KMatrixSpace of 1 by 0 matrices over GF(3)
> 

This doesn't seem consistent, and it causes problems.  E.g. calling 
pCentralTensor on abelian groups or when the bounds our out of range.  It 
hits an assert/require and fails.  It seem however consistent to treat these as
empty matrices and thus not disrupt general machinery.

==========================================================================================
 BEG12: Verbose
==========================================================================================

add to GlobalVars.m

declare verbose Multilinear, 2;

Then in places like the invariants.m where large solves are happening use

vprint Multilinear, 1 : "Solving linear system ", Nrows(mat), "by", Ncols(mat);

Do also for DerivationClosure and anything else where the user might want verbose
print outs.

==========================================================================================
 BEG13: Isom and Pisom
==========================================================================================

We should have brute force algorithms to compute isometry and pseudo-isometry groups. 
When the tensors satisfy certain conditions, we feed them to more specialized algorithms.

==========================================================================================
 BEG14: Lite Invariants
==========================================================================================

Create lite versions of the invariants to trade memory for time. This would be invoked on 
massive systems where Magma cannot construct the entire matrix due to memory. 

==========================================================================================
 BEG15: Tensor on vector spaces
==========================================================================================

All tensors should be on vector spaces from creation.
